/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTraining } from '../fn/training-controller/create-training';
import { CreateTraining$Params } from '../fn/training-controller/create-training';
import { deleteTraining } from '../fn/training-controller/delete-training';
import { DeleteTraining$Params } from '../fn/training-controller/delete-training';
import { getAllTrainings } from '../fn/training-controller/get-all-trainings';
import { GetAllTrainings$Params } from '../fn/training-controller/get-all-trainings';
import { getTrainingById } from '../fn/training-controller/get-training-by-id';
import { GetTrainingById$Params } from '../fn/training-controller/get-training-by-id';
import { Training } from '../models/training';
import { updateTraining } from '../fn/training-controller/update-training';
import { UpdateTraining$Params } from '../fn/training-controller/update-training';

@Injectable({ providedIn: 'root' })
export class TrainingControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTraining()` */
  static readonly UpdateTrainingPath = '/trainings/put-training/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTraining()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTraining$Response(params: UpdateTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<Training>> {
    return updateTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTraining$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTraining(params: UpdateTraining$Params, context?: HttpContext): Observable<Training> {
    return this.updateTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<Training>): Training => r.body)
    );
  }

  /** Path part for operation `createTraining()` */
  static readonly CreateTrainingPath = '/trainings/add-training';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTraining()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTraining$Response(params: CreateTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<Training>> {
    return createTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTraining$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTraining(params: CreateTraining$Params, context?: HttpContext): Observable<Training> {
    return this.createTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<Training>): Training => r.body)
    );
  }

  /** Path part for operation `getAllTrainings()` */
  static readonly GetAllTrainingsPath = '/trainings';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTrainings()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTrainings$Response(params?: GetAllTrainings$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Training>>> {
    return getAllTrainings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTrainings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTrainings(params?: GetAllTrainings$Params, context?: HttpContext): Observable<Array<Training>> {
    return this.getAllTrainings$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Training>>): Array<Training> => r.body)
    );
  }

  /** Path part for operation `getTrainingById()` */
  static readonly GetTrainingByIdPath = '/trainings/get-training/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTrainingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingById$Response(params: GetTrainingById$Params, context?: HttpContext): Observable<StrictHttpResponse<Training>> {
    return getTrainingById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTrainingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTrainingById(params: GetTrainingById$Params, context?: HttpContext): Observable<Training> {
    return this.getTrainingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Training>): Training => r.body)
    );
  }

  /** Path part for operation `deleteTraining()` */
  static readonly DeleteTrainingPath = '/trainings/delete-training/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTraining()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTraining$Response(params: DeleteTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTraining$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTraining(params: DeleteTraining$Params, context?: HttpContext): Observable<void> {
    return this.deleteTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
