/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createOpportunity } from '../fn/opportunity-controller/create-opportunity';
import { CreateOpportunity$Params } from '../fn/opportunity-controller/create-opportunity';
import { deleteOpportunity } from '../fn/opportunity-controller/delete-opportunity';
import { DeleteOpportunity$Params } from '../fn/opportunity-controller/delete-opportunity';
import { getAllOpportunities } from '../fn/opportunity-controller/get-all-opportunities';
import { GetAllOpportunities$Params } from '../fn/opportunity-controller/get-all-opportunities';
import { getOpportunityById } from '../fn/opportunity-controller/get-opportunity-by-id';
import { GetOpportunityById$Params } from '../fn/opportunity-controller/get-opportunity-by-id';
import { Opportunity } from '../models/opportunity';

@Injectable({ providedIn: 'root' })
export class OpportunityControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllOpportunities()` */
  static readonly GetAllOpportunitiesPath = '/api/opportunities';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOpportunities()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOpportunities$Response(params?: GetAllOpportunities$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Opportunity>>> {
    return getAllOpportunities(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOpportunities$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOpportunities(params?: GetAllOpportunities$Params, context?: HttpContext): Observable<Array<Opportunity>> {
    return this.getAllOpportunities$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Opportunity>>): Array<Opportunity> => r.body)
    );
  }

  /** Path part for operation `createOpportunity()` */
  static readonly CreateOpportunityPath = '/api/opportunities';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOpportunity()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOpportunity$Response(params: CreateOpportunity$Params, context?: HttpContext): Observable<StrictHttpResponse<Opportunity>> {
    return createOpportunity(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOpportunity$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOpportunity(params: CreateOpportunity$Params, context?: HttpContext): Observable<Opportunity> {
    return this.createOpportunity$Response(params, context).pipe(
      map((r: StrictHttpResponse<Opportunity>): Opportunity => r.body)
    );
  }

  /** Path part for operation `getOpportunityById()` */
  static readonly GetOpportunityByIdPath = '/api/opportunities/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOpportunityById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOpportunityById$Response(params: GetOpportunityById$Params, context?: HttpContext): Observable<StrictHttpResponse<Opportunity>> {
    return getOpportunityById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOpportunityById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOpportunityById(params: GetOpportunityById$Params, context?: HttpContext): Observable<Opportunity> {
    return this.getOpportunityById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Opportunity>): Opportunity => r.body)
    );
  }

  /** Path part for operation `deleteOpportunity()` */
  static readonly DeleteOpportunityPath = '/api/opportunities/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOpportunity()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOpportunity$Response(params: DeleteOpportunity$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteOpportunity(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOpportunity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOpportunity(params: DeleteOpportunity$Params, context?: HttpContext): Observable<void> {
    return this.deleteOpportunity$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
