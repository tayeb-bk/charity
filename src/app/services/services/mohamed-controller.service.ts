/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ajouterCommenter } from '../fn/mohamed-controller/ajouter-commenter';
import { AjouterCommenter$Params } from '../fn/mohamed-controller/ajouter-commenter';
import { ajouterCompagneCollecte } from '../fn/mohamed-controller/ajouter-compagne-collecte';
import { AjouterCompagneCollecte$Params } from '../fn/mohamed-controller/ajouter-compagne-collecte';
import { ajouterDonnation } from '../fn/mohamed-controller/ajouter-donnation';
import { AjouterDonnation$Params } from '../fn/mohamed-controller/ajouter-donnation';
import { Commenter } from '../models/commenter';
import { CompagneCollecte } from '../models/compagne-collecte';
import { deleteCommenter } from '../fn/mohamed-controller/delete-commenter';
import { DeleteCommenter$Params } from '../fn/mohamed-controller/delete-commenter';
import { deleteCompagneCollecte } from '../fn/mohamed-controller/delete-compagne-collecte';
import { DeleteCompagneCollecte$Params } from '../fn/mohamed-controller/delete-compagne-collecte';
import { deleteDonation } from '../fn/mohamed-controller/delete-donation';
import { DeleteDonation$Params } from '../fn/mohamed-controller/delete-donation';
import { Donation } from '../models/donation';
import { getAllCommenters } from '../fn/mohamed-controller/get-all-commenters';
import { GetAllCommenters$Params } from '../fn/mohamed-controller/get-all-commenters';
import { getAllCompagneCollecte } from '../fn/mohamed-controller/get-all-compagne-collecte';
import { GetAllCompagneCollecte$Params } from '../fn/mohamed-controller/get-all-compagne-collecte';
import { getAllDonation } from '../fn/mohamed-controller/get-all-donation';
import { GetAllDonation$Params } from '../fn/mohamed-controller/get-all-donation';
import { getCompagneCollecteById } from '../fn/mohamed-controller/get-compagne-collecte-by-id';
import { GetCompagneCollecteById$Params } from '../fn/mohamed-controller/get-compagne-collecte-by-id';
import { getDonationById } from '../fn/mohamed-controller/get-donation-by-id';
import { GetDonationById$Params } from '../fn/mohamed-controller/get-donation-by-id';
import { saveCommenter } from '../fn/mohamed-controller/save-commenter';
import { SaveCommenter$Params } from '../fn/mohamed-controller/save-commenter';
import { saveCompagneCollecte } from '../fn/mohamed-controller/save-compagne-collecte';
import { SaveCompagneCollecte$Params } from '../fn/mohamed-controller/save-compagne-collecte';
import { saveDonation } from '../fn/mohamed-controller/save-donation';
import { SaveDonation$Params } from '../fn/mohamed-controller/save-donation';
import { updateCompagneCollecte } from '../fn/mohamed-controller/update-compagne-collecte';
import { UpdateCompagneCollecte$Params } from '../fn/mohamed-controller/update-compagne-collecte';

@Injectable({ providedIn: 'root' })
export class MohamedControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateCompagneCollecte()` */
  static readonly UpdateCompagneCollectePath = '/updateCompagneCollecte/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCompagneCollecte()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompagneCollecte$Response(params: UpdateCompagneCollecte$Params, context?: HttpContext): Observable<StrictHttpResponse<CompagneCollecte>> {
    return updateCompagneCollecte(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCompagneCollecte$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCompagneCollecte(params: UpdateCompagneCollecte$Params, context?: HttpContext): Observable<CompagneCollecte> {
    return this.updateCompagneCollecte$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompagneCollecte>): CompagneCollecte => r.body)
    );
  }

  /** Path part for operation `saveDonation()` */
  static readonly SaveDonationPath = '/saveDonation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveDonation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveDonation$Response(params: SaveDonation$Params, context?: HttpContext): Observable<StrictHttpResponse<Donation>> {
    return saveDonation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveDonation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveDonation(params: SaveDonation$Params, context?: HttpContext): Observable<Donation> {
    return this.saveDonation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Donation>): Donation => r.body)
    );
  }

  /** Path part for operation `saveCompagneCollecte()` */
  static readonly SaveCompagneCollectePath = '/saveCompagneCollecte';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveCompagneCollecte()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCompagneCollecte$Response(params: SaveCompagneCollecte$Params, context?: HttpContext): Observable<StrictHttpResponse<CompagneCollecte>> {
    return saveCompagneCollecte(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveCompagneCollecte$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCompagneCollecte(params: SaveCompagneCollecte$Params, context?: HttpContext): Observable<CompagneCollecte> {
    return this.saveCompagneCollecte$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompagneCollecte>): CompagneCollecte => r.body)
    );
  }

  /** Path part for operation `saveCommenter()` */
  static readonly SaveCommenterPath = '/saveCommenter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveCommenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCommenter$Response(params: SaveCommenter$Params, context?: HttpContext): Observable<StrictHttpResponse<Commenter>> {
    return saveCommenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveCommenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveCommenter(params: SaveCommenter$Params, context?: HttpContext): Observable<Commenter> {
    return this.saveCommenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<Commenter>): Commenter => r.body)
    );
  }

  /** Path part for operation `ajouterDonnation()` */
  static readonly AjouterDonnationPath = '/ajouterDonation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ajouterDonnation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ajouterDonnation$Response(params: AjouterDonnation$Params, context?: HttpContext): Observable<StrictHttpResponse<Donation>> {
    return ajouterDonnation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ajouterDonnation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ajouterDonnation(params: AjouterDonnation$Params, context?: HttpContext): Observable<Donation> {
    return this.ajouterDonnation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Donation>): Donation => r.body)
    );
  }

  /** Path part for operation `ajouterCompagneCollecte()` */
  static readonly AjouterCompagneCollectePath = '/ajouterCompagneCollecte';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ajouterCompagneCollecte()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ajouterCompagneCollecte$Response(params: AjouterCompagneCollecte$Params, context?: HttpContext): Observable<StrictHttpResponse<CompagneCollecte>> {
    return ajouterCompagneCollecte(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ajouterCompagneCollecte$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ajouterCompagneCollecte(params: AjouterCompagneCollecte$Params, context?: HttpContext): Observable<CompagneCollecte> {
    return this.ajouterCompagneCollecte$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompagneCollecte>): CompagneCollecte => r.body)
    );
  }

  /** Path part for operation `ajouterCommenter()` */
  static readonly AjouterCommenterPath = '/ajouterCommenter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ajouterCommenter()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ajouterCommenter$Response(params: AjouterCommenter$Params, context?: HttpContext): Observable<StrictHttpResponse<Commenter>> {
    return ajouterCommenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ajouterCommenter$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ajouterCommenter(params: AjouterCommenter$Params, context?: HttpContext): Observable<Commenter> {
    return this.ajouterCommenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<Commenter>): Commenter => r.body)
    );
  }

  /** Path part for operation `getDonationById()` */
  static readonly GetDonationByIdPath = '/getDonationById{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDonationById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDonationById$Response(params: GetDonationById$Params, context?: HttpContext): Observable<StrictHttpResponse<Donation>> {
    return getDonationById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDonationById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDonationById(params: GetDonationById$Params, context?: HttpContext): Observable<Donation> {
    return this.getDonationById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Donation>): Donation => r.body)
    );
  }

  /** Path part for operation `getCompagneCollecteById()` */
  static readonly GetCompagneCollecteByIdPath = '/getCompagneCollecteById{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCompagneCollecteById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompagneCollecteById$Response(params: GetCompagneCollecteById$Params, context?: HttpContext): Observable<StrictHttpResponse<CompagneCollecte>> {
    return getCompagneCollecteById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCompagneCollecteById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCompagneCollecteById(params: GetCompagneCollecteById$Params, context?: HttpContext): Observable<CompagneCollecte> {
    return this.getCompagneCollecteById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CompagneCollecte>): CompagneCollecte => r.body)
    );
  }

  /** Path part for operation `getAllDonation()` */
  static readonly GetAllDonationPath = '/getAllDonation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDonation()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDonation$Response(params?: GetAllDonation$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Donation>>> {
    return getAllDonation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDonation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDonation(params?: GetAllDonation$Params, context?: HttpContext): Observable<Array<Donation>> {
    return this.getAllDonation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Donation>>): Array<Donation> => r.body)
    );
  }

  /** Path part for operation `getAllCompagneCollecte()` */
  static readonly GetAllCompagneCollectePath = '/getAllCompagneCollecte';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCompagneCollecte()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCompagneCollecte$Response(params?: GetAllCompagneCollecte$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CompagneCollecte>>> {
    return getAllCompagneCollecte(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCompagneCollecte$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCompagneCollecte(params?: GetAllCompagneCollecte$Params, context?: HttpContext): Observable<Array<CompagneCollecte>> {
    return this.getAllCompagneCollecte$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CompagneCollecte>>): Array<CompagneCollecte> => r.body)
    );
  }

  /** Path part for operation `getAllCommenters()` */
  static readonly GetAllCommentersPath = '/getAllCommenters';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCommenters()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCommenters$Response(params?: GetAllCommenters$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Commenter>>> {
    return getAllCommenters(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCommenters$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCommenters(params?: GetAllCommenters$Params, context?: HttpContext): Observable<Array<Commenter>> {
    return this.getAllCommenters$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Commenter>>): Array<Commenter> => r.body)
    );
  }

  /** Path part for operation `deleteDonation()` */
  static readonly DeleteDonationPath = '/deleteDonation{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDonation()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDonation$Response(params: DeleteDonation$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteDonation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDonation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDonation(params: DeleteDonation$Params, context?: HttpContext): Observable<void> {
    return this.deleteDonation$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCompagneCollecte()` */
  static readonly DeleteCompagneCollectePath = '/deleteCompagneCollecte{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCompagneCollecte()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompagneCollecte$Response(params: DeleteCompagneCollecte$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCompagneCollecte(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCompagneCollecte$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCompagneCollecte(params: DeleteCompagneCollecte$Params, context?: HttpContext): Observable<void> {
    return this.deleteCompagneCollecte$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCommenter()` */
  static readonly DeleteCommenterPath = '/deleteCommenter/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCommenter()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCommenter$Response(params: DeleteCommenter$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCommenter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCommenter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCommenter(params: DeleteCommenter$Params, context?: HttpContext): Observable<void> {
    return this.deleteCommenter$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
